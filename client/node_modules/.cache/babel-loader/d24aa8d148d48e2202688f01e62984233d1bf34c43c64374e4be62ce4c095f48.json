{"ast":null,"code":"var _jsxFileName = \"/Users/nevandsouza/Desktop/BS-bootcamp/Graded Submissions/Capstone/CryptoClash/client/src/components/GuessingPhase/GuessingPhase.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport socket from '../../socket';\nimport axios from 'axios';\nimport './GuessingPhase.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GuessingPhase = _ref => {\n  _s();\n  let {\n    onFinish,\n    decodersGuesses\n  } = _ref;\n  const [currentGuess, setCurrentGuess] = useState('');\n  const handleInputChange = e => {\n    setCurrentGuess(e.target.value);\n  };\n  const validateGuess = async guess => {\n    try {\n      const response = await axios.get(`https://api.datamuse.com/words?sp=${guess}&max=1`);\n      if (response.data.length > 0 && response.data[0].word === guess) {\n        return true;\n      }\n    } catch (error) {\n      console.error(`Error validating guess: ${error}`);\n    }\n    return false;\n  };\n  const handleSubmitGuess = async () => {\n    if (await validateGuess(currentGuess)) {\n      socket.emit('submitGuess', currentGuess);\n    } else {\n      alert('Invalid guess. Please enter a valid 5-letter word.');\n    }\n\n    // Reset the input field\n    setCurrentGuess('');\n  };\n\n  // ...\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"guessing-phase\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"guesses\",\n      children: decodersGuesses.map((_ref2, index) => {\n        let {\n          guess,\n          feedback\n        } = _ref2;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"guess\",\n          children: guess.split('').map((char, i) => /*#__PURE__*/_jsxDEV(\"span\", {\n            className: `letter ${feedback[i]}`,\n            children: char\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 15\n          }, this))\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 11\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n};\n_s(GuessingPhase, \"BRb0TELr2RNgIcG/5GJ0/Mie/eI=\");\n_c = GuessingPhase;\nexport default GuessingPhase;\nvar _c;\n$RefreshReg$(_c, \"GuessingPhase\");","map":{"version":3,"names":["React","useState","socket","axios","jsxDEV","_jsxDEV","GuessingPhase","_ref","_s","onFinish","decodersGuesses","currentGuess","setCurrentGuess","handleInputChange","e","target","value","validateGuess","guess","response","get","data","length","word","error","console","handleSubmitGuess","emit","alert","className","children","map","_ref2","index","feedback","split","char","i","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/nevandsouza/Desktop/BS-bootcamp/Graded Submissions/Capstone/CryptoClash/client/src/components/GuessingPhase/GuessingPhase.js"],"sourcesContent":["import React, { useState } from 'react';\nimport socket from '../../socket';\nimport axios from 'axios';\nimport './GuessingPhase.css';\n\nconst GuessingPhase = ({ onFinish, decodersGuesses }) => {\n  const [currentGuess, setCurrentGuess] = useState('');\n\n  const handleInputChange = (e) => {\n    setCurrentGuess(e.target.value);\n  };\n\n  const validateGuess = async (guess) => {\n    try {\n      const response = await axios.get(`https://api.datamuse.com/words?sp=${guess}&max=1`);\n      if (response.data.length > 0 && response.data[0].word === guess) {\n        return true;\n      }\n    } catch (error) {\n      console.error(`Error validating guess: ${error}`);\n    }\n    return false;\n  };\n\n  const handleSubmitGuess = async () => {\n    if (await validateGuess(currentGuess)) {\n      socket.emit('submitGuess', currentGuess);\n    } else {\n      alert('Invalid guess. Please enter a valid 5-letter word.');\n    }\n\n    // Reset the input field\n    setCurrentGuess('');\n  };\n\n  // ...\n\n  return (\n    <div className=\"guessing-phase\">\n      {/* Add your other GuessingPhase component content here */}\n      <div className=\"guesses\">\n        {decodersGuesses.map(({ guess, feedback }, index) => (\n          <div key={index} className=\"guess\">\n            {guess.split('').map((char, i) => (\n              <span key={i} className={`letter ${feedback[i]}`}>\n                {char}\n              </span>\n            ))}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default GuessingPhase;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,MAAM,MAAM,cAAc;AACjC,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAO,qBAAqB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7B,MAAMC,aAAa,GAAGC,IAAA,IAAmC;EAAAC,EAAA;EAAA,IAAlC;IAAEC,QAAQ;IAAEC;EAAgB,CAAC,GAAAH,IAAA;EAClD,MAAM,CAACI,YAAY,EAAEC,eAAe,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAEpD,MAAMY,iBAAiB,GAAIC,CAAC,IAAK;IAC/BF,eAAe,CAACE,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC;EACjC,CAAC;EAED,MAAMC,aAAa,GAAG,MAAOC,KAAK,IAAK;IACrC,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMhB,KAAK,CAACiB,GAAG,CAAE,qCAAoCF,KAAM,QAAO,CAAC;MACpF,IAAIC,QAAQ,CAACE,IAAI,CAACC,MAAM,GAAG,CAAC,IAAIH,QAAQ,CAACE,IAAI,CAAC,CAAC,CAAC,CAACE,IAAI,KAAKL,KAAK,EAAE;QAC/D,OAAO,IAAI;MACb;IACF,CAAC,CAAC,OAAOM,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAE,2BAA0BA,KAAM,EAAC,CAAC;IACnD;IACA,OAAO,KAAK;EACd,CAAC;EAED,MAAME,iBAAiB,GAAG,MAAAA,CAAA,KAAY;IACpC,IAAI,MAAMT,aAAa,CAACN,YAAY,CAAC,EAAE;MACrCT,MAAM,CAACyB,IAAI,CAAC,aAAa,EAAEhB,YAAY,CAAC;IAC1C,CAAC,MAAM;MACLiB,KAAK,CAAC,oDAAoD,CAAC;IAC7D;;IAEA;IACAhB,eAAe,CAAC,EAAE,CAAC;EACrB,CAAC;;EAED;;EAEA,oBACEP,OAAA;IAAKwB,SAAS,EAAC,gBAAgB;IAAAC,QAAA,eAE7BzB,OAAA;MAAKwB,SAAS,EAAC,SAAS;MAAAC,QAAA,EACrBpB,eAAe,CAACqB,GAAG,CAAC,CAAAC,KAAA,EAAsBC,KAAK;QAAA,IAA1B;UAAEf,KAAK;UAAEgB;QAAS,CAAC,GAAAF,KAAA;QAAA,oBACvC3B,OAAA;UAAiBwB,SAAS,EAAC,OAAO;UAAAC,QAAA,EAC/BZ,KAAK,CAACiB,KAAK,CAAC,EAAE,CAAC,CAACJ,GAAG,CAAC,CAACK,IAAI,EAAEC,CAAC,kBAC3BhC,OAAA;YAAcwB,SAAS,EAAG,UAASK,QAAQ,CAACG,CAAC,CAAE,EAAE;YAAAP,QAAA,EAC9CM;UAAI,GADIC,CAAC;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,QAGb;QAAC,GALMR,KAAK;UAAAK,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QAMT;MAAA,CACP;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EACE;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACF;AAEV,CAAC;AAACjC,EAAA,CAhDIF,aAAa;AAAAoC,EAAA,GAAbpC,aAAa;AAkDnB,eAAeA,aAAa;AAAC,IAAAoC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}